import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { registerUser } from '../../store/reducers/user';

const schema = yup.object().shape({
    firstName: yup
        .string()
        .matches(/^[A-Z–ê-–Ø–Å][a-z–∞-—è—ë]{1,}$/, "–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
        .required("–í–≤–µ–¥–∏—Ç–µ –∏–º—è"),
    lastName: yup
        .string()
        .matches(/^[A-Z–ê-–Ø–Å][a-z–∞-—è—ë]{1,}(-[A-Z–ê-–Ø–Å][a-z–∞-—è—ë]{1,})?$/, "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π")
        .required("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"),
    email: yup.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").required("–í–≤–µ–¥–∏—Ç–µ email"),
    password: yup.string().min(6, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤").required("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
    confirmPassword: yup
        .string()
        .oneOf([yup.ref("password"), null], "–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        .required("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
});

const Register = () => {
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const { status, error } = useSelector((state) => state.user);

    const {
        register,
        handleSubmit,
        formState: { errors, isValid },
    } = useForm({
        resolver: yupResolver(schema),
        mode: "onChange",
    });

    const onSubmit = async (data) => {
        const userData = {
            firstName: data.firstName,
            lastName: data.lastName,
            email: data.email,
            password: data.password,
            balance: 0
        };

        dispatch(registerUser(userData)).then((result) => {
            if (registerUser.fulfilled.match(result)) {
                alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üöÄ");
                navigate("/");
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üò¢");
            }
        });
    };

    return (
        <form onSubmit={handleSubmit(onSubmit)} className="register-form">
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>

            <label>–ò–º—è:</label>
            <input type="text" {...register("firstName")} />
            {errors.firstName && <p className="error">{errors.firstName.message}</p>}

            <label>–§–∞–º–∏–ª–∏—è:</label>
            <input type="text" {...register("lastName")} />
            {errors.lastName && <p className="error">{errors.lastName.message}</p>}

            <label>Email:</label>
            <input type="email" {...register("email")} />
            {errors.email && <p className="error">{errors.email.message}</p>}

            <label>–ü–∞—Ä–æ–ª—å:</label>
            <input type="password" {...register("password")} />
            {errors.password && <p className="error">{errors.password.message}</p>}

            <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
            <input type="password" {...register("confirmPassword")} />
            {errors.confirmPassword && <p className="error">{errors.confirmPassword.message}</p>}

            {error && <p className="error">{error}</p>}

            <button type="submit" disabled={!isValid || status === "loading"}>
                {status === "loading" ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
            </button>
        </form>
    );
};

export default Register;
